// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

namespace geometricShape
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Создание фигур
            GeometricFigure triangle = new Triangle("Треугольник", 3, 4, 5);
            GeometricFigure square = new Square("Квадрат", 10);

            Console.WriteLine($"{triangle.ToString()}");
            Console.WriteLine($"\n{square.ToString()}");
            CompoundFigure compoundFigure = new CompoundFigure();
            compoundFigure.AddFigure(triangle);
            compoundFigure.AddFigure(square);

            Console.WriteLine($"Общая площадь: {compoundFigure.GetArea()}");
            Console.WriteLine($"Общий периметр: {compoundFigure.GetPerimeter()}");
        }

        public abstract class GeometricFigure
        {
            protected string Name { get; set; } // имя фигуры
            
            // методы для получения площади и периметра
            public abstract double GetArea();
            public abstract double GetPerimeter();
            
            // перегрузка ToString
            public override string ToString()
            {
                return $"Фигура: {Name}\nПлощадь: {GetArea()}\nПериметр: {GetPerimeter()}";
            }

            public virtual void Print()
            {
                Console.WriteLine($"Фигура: {Name}");
            }
        }
        
        // Класс треугогольник
        public class Triangle : GeometricFigure
        {
            private double SideA { get; }// длина стороны А
            private double SideB { get; }// длина стороны B
            private double SideC { get; }// длина стороны C
            
            // конструктор
            public Triangle(string name, double a, double b, double c)
            {
                this.Name = name;
                this.SideA = a;
                this.SideB = b;
                this.SideC = c;
            }
            
            // Метод для получения площади
            public override double GetArea()
            {
                // формула Герона
                double p = (SideA + SideB + SideC) / 2;
                return Math.Sqrt(p * (p - SideA) * (p - SideB) * (p - SideC));
            }
            
            // Метод для получения периметра
            public override double GetPerimeter()
            {
                return SideA + SideB + SideC;
            }
        }

        // Класс квадрата
        public class Square : GeometricFigure
        {
            private double Length { get; } // длина стороны
            
            // конструктор
            public Square(string name, double length)
            {
                this.Name = name;
                this.Length = length;
            }
            
            // Метод для получения площади
            public override double GetArea()
            {
                return Length * Length;
            }
            
            // Метод для получения периметра
            public override double GetPerimeter()
            {
                return Length * 4;
            }
        }
        
        // Класс составная фигура
        public class CompoundFigure : GeometricFigure
        {
            private List<GeometricFigure> figeres = new List<GeometricFigure>(); // список фигур
            
            //Метод для добавления фигуры в составную фигуру
            public void AddFigure(GeometricFigure figure)
            {
                figeres.Add(figure);
            }
            
            // Метод для вычисления общей площади всех фигур
            public override double GetArea()
            {
                return figeres.Sum(figure => figure.GetArea());
            }
            
            // Метод для вычисления общего периметра всех фигур
            public override double GetPerimeter()
            {
                return figeres.Sum(figure => figure.GetPerimeter());
            }
        }
    }
};

